version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: scoreboard_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    command: ["postgres", "-c", "max_connections=200"]
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  backend:
    build: ./backend
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=scoreboard.settings
      - DATABASE_URL=postgres://postgres:postgres@db:5432/scoreboard_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NEW_RELIC_CONFIG_FILE=/app/newrelic.ini
      - NEW_RELIC_ENVIRONMENT=production
    depends_on:
      - db
      - redis

  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: npm start
    depends_on:
      - backend

  celeryworker:
    build: ./backend
    command: celery -A scoreboard worker --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      - DJANGO_SETTINGS_MODULE=scoreboard.settings
      - DATABASE_URL=postgres://postgres:postgres@db:5432/scoreboard_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NEW_RELIC_CONFIG_FILE=/app/newrelic.ini
    depends_on:
      - db
      - redis
    deploy:
      replicas: 1  # Run 2 celery workers. For local dev, you can also use: sudo docker-compose up -d --scale celeryworker=2

  celerybeat:
    build: ./backend
    command: celery -A scoreboard beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    environment:
      - DJANGO_SETTINGS_MODULE=scoreboard.settings
      - DATABASE_URL=postgres://postgres:postgres@db:5432/scoreboard_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NEW_RELIC_CONFIG_FILE=/app/newrelic.ini
    depends_on:
      - db
      - redis

volumes:
  postgres_data:
  redis_data: 